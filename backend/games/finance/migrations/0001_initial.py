# Generated by Django 4.1.7 on 2023-04-08 10:47
import uuid
import base.model_fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Offer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.UUIDField(unique=True, verbose_name='UUID creator')),
                ('is_active', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'offer',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.UUIDField(verbose_name='Created By UUID')),
                ('currency', models.CharField(choices=[('RUB', 'Rub'), ('USD', 'Usd'), ('KZT', 'Kzt'), ('EUR', 'Eur')], default='RUB', max_length=3, verbose_name='Currency')),
                ('total_amount', base.model_fields.AmountField(decimal_places=2, max_digits=10, verbose_name='Total Amount')),
                ('total_discount', models.PositiveSmallIntegerField(verbose_name='Total Discount (%)')),
                ('payment_amount', base.model_fields.AmountField(decimal_places=2, max_digits=10, verbose_name='Total Amount')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('payment_id', models.CharField(max_length=128, null=True, verbose_name='Payment Id')),
                ('is_paid', models.BooleanField(default=False, verbose_name='Is Paid')),
                ('gift_recipient', models.UUIDField(verbose_name='Recipient UUID')),
            ],
            options={
                'db_table': 'order',
            },
        ),
        migrations.CreateModel(
            name='OrderOfferProduct',
            fields=[
                ('product_id', models.UUIDField(primary_key=True, serialize=False, verbose_name='Product UUID')),
            ],
            options={
                'db_table': 'order_offer_product',
            },
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', base.model_fields.AmountField(decimal_places=2, max_digits=10, verbose_name='Price')),
                ('currency', models.CharField(choices=[('RUB', 'Rub'), ('USD', 'Usd'), ('KZT', 'Kzt'), ('EUR', 'Eur')], default='RUB', max_length=3, verbose_name='Currency')),
                ('created_by', models.UUIDField(verbose_name='Created by')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_by', models.UUIDField(verbose_name='Updated by')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
            ],
            options={
                'db_table': 'price',
            },
        ),
        migrations.CreateModel(
            name='SchedulerPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', base.model_fields.AmountField(decimal_places=2, max_digits=10, verbose_name='Price')),
                ('currency', models.CharField(choices=[('RUB', 'Rub'), ('USD', 'Usd'), ('KZT', 'Kzt'), ('EUR', 'Eur')], default='RUB', max_length=3, verbose_name='Currency')),
                ('created_by', models.UUIDField(verbose_name='Created by')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('from_dttm', models.DateTimeField(verbose_name='From dttm')),
                ('to_dttm', models.DateTimeField(verbose_name='To dttm')),
                ('is_active', models.BooleanField(default=False)),
                ('price', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheduler_prices', to='finance.price')),
            ],
            options={
                'db_table': 'scheduler_price',
            },
        ),
        migrations.CreateModel(
            name='Sale',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_dttm', models.DateTimeField(verbose_name='From dttm')),
                ('to_dttm', models.DateTimeField(verbose_name='To dttm')),
                ('discount', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Discount')),
                ('is_active', models.BooleanField(default=False)),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sales', to='finance.offer')),
            ],
            options={
                'db_table': 'sale',
            },
        ),
        migrations.CreateModel(
            name='ProductOffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.UUIDField(verbose_name='UUID creator')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='finance.offer')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.product')),
            ],
        ),
        migrations.CreateModel(
            name='OrderStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('WAITING_PAYMENT', 'Waiting Payment'), ('COMPLETED', 'Completed'), ('CANCELED', 'Canceled'), ('REFUND_REQUESTED', 'Refund Requested'), ('REFUNDED', 'Refunded')], default='WAITING_PAYMENT', max_length=16, verbose_name='Status')),
                ('from_dttm', models.DateTimeField(auto_now_add=True, verbose_name='From dttm')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statuses', to='finance.order')),
            ],
            options={
                'db_table': 'order_status',
                'ordering': ('-from_dttm',),
            },
        ),
        migrations.CreateModel(
            name='OrderOffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('offer_id', models.UUIDField(verbose_name='Offer ID')),
                ('price_currency', models.CharField(choices=[('RUB', 'Rub'), ('USD', 'Usd'), ('KZT', 'Kzt'), ('EUR', 'Eur')], default='RUB', max_length=3, verbose_name='Currency')),
                ('price_amount', base.model_fields.AmountField(decimal_places=2, max_digits=10, verbose_name='Price Amount')),
                ('sale_discount', models.PositiveSmallIntegerField(verbose_name='Total Discount (%)')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='offers', to='finance.order')),
                ('products', models.ManyToManyField(related_name='offers', to='finance.orderofferproduct')),
            ],
            options={
                'db_table': 'order_offer',
            },
        ),
        migrations.AddField(
            model_name='offer',
            name='price',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='offer', to='finance.price'),
        ),
        migrations.AddField(
            model_name='offer',
            name='products',
            field=models.ManyToManyField(related_name='offers', through='finance.ProductOffer', to='core.product'),
        ),
    ]
