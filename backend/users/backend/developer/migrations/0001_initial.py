# Generated by Django 4.1.7 on 2023-04-02 19:02

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.contenttypes.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('administrator', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=50, verbose_name='Company title')),
                ('description', models.TextField(verbose_name='Company description')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Company email link')),
                ('poster', models.ImageField(blank=True, upload_to='', verbose_name='Company poster')),
                ('is_confirmed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Company created date')),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Company',
                'verbose_name_plural': 'Company',
            },
        ),
        migrations.CreateModel(
            name='CompanyUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True, verbose_name='email address')),
                ('phone', models.CharField(max_length=12, verbose_name='User phone-number')),
                ('avatar', models.ImageField(blank=True, upload_to='', verbose_name='User avatar')),
                ('is_banned', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='all_user_this_company', to='developer.company', verbose_name='Company')),
                ('country', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='administrator.country', verbose_name='User country')),
            ],
            options={
                'verbose_name': 'Company user',
                'verbose_name_plural': 'Company Users',
                'db_table': 'company_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ContactType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name contact')),
                ('icon', models.ImageField(blank=True, null=True, upload_to='', verbose_name='icon contact')),
            ],
            options={
                'verbose_name': 'Contact',
                'verbose_name_plural': 'Contacts',
            },
        ),
        migrations.CreateModel(
            name='DeveloperContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_name', models.CharField(max_length=16, verbose_name='Service Name')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100, verbose_name='python model class name')),
            ],
            options={
                'verbose_name': 'developer content type',
                'verbose_name_plural': 'developer content types',
                'db_table': 'developer_content_type',
                'abstract': False,
                'unique_together': {('service_name', 'app_label', 'model')},
            },
            managers=[
                ('objects', django.contrib.contenttypes.models.ContentTypeManager()),
            ],
        ),
        migrations.CreateModel(
            name='Friend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('friend', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friend', to='developer.companyuser', verbose_name='friend')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to='developer.companyuser', verbose_name='user')),
            ],
        ),
        migrations.CreateModel(
            name='DeveloperPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('codename', models.CharField(max_length=100, verbose_name='codename')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='developer.developercontenttype', verbose_name='content type')),
            ],
            options={
                'verbose_name': 'developer permission',
                'verbose_name_plural': 'developer permissions',
                'db_table': 'developer_permission',
                'ordering': ['content_type__app_label', 'content_type__model', 'codename'],
                'abstract': False,
                'unique_together': {('content_type', 'codename')},
            },
            managers=[
                ('objects', django.contrib.auth.models.PermissionManager()),
            ],
        ),
        migrations.CreateModel(
            name='DeveloperGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='name')),
                ('permissions', models.ManyToManyField(blank=True, related_query_name='group', to='developer.developerpermission', verbose_name='permissions')),
            ],
            options={
                'verbose_name': 'developer group',
                'verbose_name_plural': 'developer groups',
                'db_table': 'developer_group',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=150, verbose_name='value contact')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='developer.contacttype', verbose_name='type contact')),
            ],
            options={
                'verbose_name': 'Company contact',
                'verbose_name_plural': 'Company contacts',
            },
        ),
        migrations.AddField(
            model_name='companyuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='developer.developergroup', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='companyuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='developer.developerpermission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='CompanyContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='companys', to='developer.company')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='developer.contact')),
            ],
        ),
        migrations.AddField(
            model_name='company',
            name='created_by',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='company_owner', to='developer.companyuser', verbose_name='Company owner'),
        ),
    ]
