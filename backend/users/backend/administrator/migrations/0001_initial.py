# Generated by Django 4.1.7 on 2023-05-02 11:09

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('developer', '__first__'),
        ('common', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdminPermission',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('codename', models.CharField(max_length=100, verbose_name='codename')),
            ],
            options={
                'verbose_name': 'permission',
                'verbose_name_plural': 'permissions',
                'db_table': 'permission',
                'ordering': ['codename'],
                'abstract': False,
                'unique_together': {('codename',)},
            },
            managers=[
                ('objects', django.contrib.auth.models.PermissionManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdminGroup',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='name')),
                (
                    'permission',
                    models.ManyToManyField(
                        blank=True,
                        related_name='admingroup_set',
                        related_query_name='admingroup',
                        to='administrator.adminpermission',
                        verbose_name='permission',
                    ),
                ),
            ],
            options={
                'verbose_name': 'admin group',
                'verbose_name_plural': 'admin groups',
                'db_table': 'admin_group',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                (
                    'last_login',
                    models.DateTimeField(blank=True, null=True, verbose_name='last login'),
                ),
                (
                    'username',
                    models.CharField(
                        error_messages={'unique': 'A user with that username already exists.'},
                        help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name='username',
                    ),
                ),
                (
                    'first_name',
                    models.CharField(blank=True, max_length=150, verbose_name='first name'),
                ),
                (
                    'last_name',
                    models.CharField(blank=True, max_length=150, verbose_name='last name'),
                ),
                (
                    'is_active',
                    models.BooleanField(
                        default=True,
                        help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                        verbose_name='active',
                    ),
                ),
                (
                    'date_joined',
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name='date joined'
                    ),
                ),
                (
                    'id',
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    'email',
                    models.EmailField(
                        db_index=True, max_length=254, unique=True, verbose_name='email address'
                    ),
                ),
                (
                    'phone',
                    models.CharField(default='', max_length=15, unique=True, verbose_name='phone'),
                ),
                ('is_banned', models.BooleanField(default=False)),
                (
                    'created_at',
                    models.DateTimeField(auto_now_add=True, verbose_name='user creation date'),
                ),
                ('update_at', models.DateTimeField(auto_now=True, verbose_name='user modify date')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='')),
                ('is_superuser', models.BooleanField(default=False)),
                (
                    'country',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to='common.country',
                        verbose_name='Страна',
                    ),
                ),
                (
                    'developer_groups',
                    models.ManyToManyField(
                        blank=True,
                        related_name='admin_set',
                        related_query_name='admin',
                        to='developer.developergroup',
                        verbose_name='Developer group for admin',
                    ),
                ),
                (
                    'developer_permissions',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Specific developer permissions for admin',
                        related_name='admin_set',
                        related_query_name='admin',
                        to='developer.developerpermission',
                        verbose_name='developer permissions',
                    ),
                ),
                (
                    'groups',
                    models.ManyToManyField(
                        blank=True,
                        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                        related_name='admin_set',
                        related_query_name='admin',
                        to='administrator.admingroup',
                        verbose_name='admin_groups',
                    ),
                ),
                (
                    'user_permission',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Specific permissions for this admin.',
                        related_name='admin_set',
                        related_query_name='admin',
                        to='administrator.adminpermission',
                        verbose_name='admin permissions',
                    ),
                ),
                (
                    'user_permissions',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Specific permissions for this user.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.permission',
                        verbose_name='user permissions',
                    ),
                ),
            ],
            options={
                'db_table': 'admin',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
